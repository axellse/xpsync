// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as io$0 from "../io/models.js";

export class Action {
    /**
     * Creates a new Action instance.
     * @param {Partial<Action>} [$$source = {}] - The source object to create the Action.
     */
    constructor($$source = {}) {
        if (!("Type" in $$source)) {
            /**
             * either ToDevice or FromDevice. If type is "" the action is ignored
             * @member
             * @type {string}
             */
            this["Type"] = "";
        }
        if (!("FileName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["FileName"] = "";
        }
        if (!("UploadReader" in $$source)) {
            /**
             * only populated if type is ToDevice
             * @member
             * @type {io$0.ReadSeekCloser}
             */
            this["UploadReader"] = null;
        }
        if (!("DownloadBegins" in $$source)) {
            /**
             * only populated if type is FromDevice, called when the download has begun.
             * @member
             * @type {any | null}
             */
            this["DownloadBegins"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Action instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Action}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Action(/** @type {Partial<Action>} */($$parsedSource));
    }
}

export class Device {
    /**
     * Creates a new Device instance.
     * @param {Partial<Device>} [$$source = {}] - The source object to create the Device.
     */
    constructor($$source = {}) {
        if (!("Ip" in $$source)) {
            /**
             * main identifier
             * @member
             * @type {string}
             */
            this["Ip"] = "";
        }
        if (!("Name" in $$source)) {
            /**
             * extracted from user agent
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("LastPing" in $$source)) {
            /**
             * if we've gone more than 3 seconds without a ping, we dont include it
             * @member
             * @type {number}
             */
            this["LastPing"] = 0;
        }
        if (!("PendingAction" in $$source)) {
            /**
             * @member
             * @type {Action}
             */
            this["PendingAction"] = (new Action());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Device instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Device}
     */
    static createFrom($$source = {}) {
        const $$createField3_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("PendingAction" in $$parsedSource) {
            $$parsedSource["PendingAction"] = $$createField3_0($$parsedSource["PendingAction"]);
        }
        return new Device(/** @type {Partial<Device>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Action.createFrom;
